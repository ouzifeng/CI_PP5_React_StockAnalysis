{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\David\\\\Desktop\\\\Websites\\\\stocks\\\\frontend\\\\src\\\\components\\\\stockpage\\\\SplitsDividendsTable.js\";\nimport React from 'react';\nimport { Typography, Table, TableBody, TableCell, TableContainer, TableRow, Paper, Box, Skeleton } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SplitsDividendsTable = ({\n  splitsDividendsData\n}) => {\n  const splitsDividendsItems = [{\n    label: 'Forward Annual Dividend Rate',\n    key: 'forward_annual_dividend_rate'\n  }, {\n    label: 'Forward Annual Dividend Yield',\n    key: 'forward_annual_dividend_yield'\n  }, {\n    label: 'Payout Ratio',\n    key: 'payout_ratio'\n  }, {\n    label: 'Dividend Date',\n    key: 'dividend_date'\n  }, {\n    label: 'Ex-Dividend Date',\n    key: 'ex_dividend_date'\n  }, {\n    label: 'Last Split Factor',\n    key: 'last_split_factor'\n  }, {\n    label: 'Last Split Date',\n    key: 'last_split_date'\n  }];\n  const renderRow = (item, key) => {\n    let value = splitsDividendsData[item.key];\n\n    // Check if the value should be formatted as a percentage\n    if (item.key === 'forward_annual_dividend_yield' || item.key === 'payout_ratio') {\n      value = value ? `${(value * 100).toFixed(2)}%` : 'N/A';\n    } else {\n      value = value || 'N/A';\n    }\n    return /*#__PURE__*/_jsxDEV(TableRow, {\n      children: [/*#__PURE__*/_jsxDEV(TableCell, {\n        component: \"th\",\n        scope: \"row\",\n        children: item.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        align: \"right\",\n        sx: {\n          fontWeight: 'bold'\n        },\n        children: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, key, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 3,\n    sx: {\n      margin: 'auto',\n      overflow: 'hidden'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        bgcolor: 'primary.main',\n        p: 1\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle1\",\n        sx: {\n          color: 'common.white',\n          textAlign: 'center'\n        },\n        children: \"Splits & Dividends\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        \"aria-label\": \"Splits & Dividends Table\",\n        children: /*#__PURE__*/_jsxDEV(TableBody, {\n          children: splitsDividendsData ? splitsDividendsItems.filter(item => item.key !== 'general') // Filter out \"General\"\n          .map((item, index) => renderRow(item, index)) : /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(Skeleton, {\n                variant: \"text\",\n                width: 100\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(Skeleton, {\n                variant: \"text\",\n                width: 100\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_c = SplitsDividendsTable;\nexport default SplitsDividendsTable;\nvar _c;\n$RefreshReg$(_c, \"SplitsDividendsTable\");","map":{"version":3,"names":["React","Typography","Table","TableBody","TableCell","TableContainer","TableRow","Paper","Box","Skeleton","jsxDEV","_jsxDEV","SplitsDividendsTable","splitsDividendsData","splitsDividendsItems","label","key","renderRow","item","value","toFixed","children","component","scope","fileName","_jsxFileName","lineNumber","columnNumber","align","sx","fontWeight","elevation","margin","overflow","bgcolor","p","variant","color","textAlign","filter","map","index","width","_c","$RefreshReg$"],"sources":["C:/Users/David/Desktop/Websites/stocks/frontend/src/components/stockpage/SplitsDividendsTable.js"],"sourcesContent":["import React from 'react';\r\nimport { Typography, Table, TableBody, TableCell, TableContainer, TableRow, Paper, Box, Skeleton } from '@mui/material';\r\n\r\nconst SplitsDividendsTable = ({ splitsDividendsData }) => {\r\n  const splitsDividendsItems = [\r\n    { label: 'Forward Annual Dividend Rate', key: 'forward_annual_dividend_rate' },\r\n    { label: 'Forward Annual Dividend Yield', key: 'forward_annual_dividend_yield' },\r\n    { label: 'Payout Ratio', key: 'payout_ratio' },\r\n    { label: 'Dividend Date', key: 'dividend_date' },\r\n    { label: 'Ex-Dividend Date', key: 'ex_dividend_date' },\r\n    { label: 'Last Split Factor', key: 'last_split_factor' },\r\n    { label: 'Last Split Date', key: 'last_split_date' },\r\n  ];\r\n\r\n  const renderRow = (item, key) => {\r\n    let value = splitsDividendsData[item.key];\r\n\r\n    // Check if the value should be formatted as a percentage\r\n    if (item.key === 'forward_annual_dividend_yield' || item.key === 'payout_ratio') {\r\n      value = value ? `${(value * 100).toFixed(2)}%` : 'N/A';\r\n    } else {\r\n      value = value || 'N/A';\r\n    }\r\n\r\n    return (\r\n      <TableRow key={key}>\r\n        <TableCell component=\"th\" scope=\"row\">{item.label}</TableCell>\r\n        <TableCell align=\"right\" sx={{ fontWeight: 'bold' }}>\r\n          {value}\r\n        </TableCell>\r\n      </TableRow>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ margin: 'auto', overflow: 'hidden' }}>\r\n      <Box sx={{ bgcolor: 'primary.main', p: 1 }}>\r\n        <Typography variant=\"subtitle1\" sx={{ color: 'common.white', textAlign: 'center' }}>Splits & Dividends</Typography>\r\n      </Box>\r\n      <TableContainer>\r\n        <Table aria-label=\"Splits & Dividends Table\">\r\n          <TableBody>\r\n            {splitsDividendsData ? (\r\n              splitsDividendsItems\r\n                .filter(item => item.key !== 'general') // Filter out \"General\"\r\n                .map((item, index) => renderRow(item, index))\r\n            ) : (\r\n              <TableRow>\r\n                <TableCell>\r\n                  <Skeleton variant=\"text\" width={100} />\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Skeleton variant=\"text\" width={100} />\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default SplitsDividendsTable;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}