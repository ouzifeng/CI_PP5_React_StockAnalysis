{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\David\\\\Desktop\\\\Websites\\\\stocks\\\\frontend\\\\src\\\\components\\\\stockpage\\\\IncomeStatements.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Button, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Typography, Box, Grid } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst IncomeStatements = ({\n  incomeStatements\n}) => {\n  _s();\n  const [selectedFrequency, setSelectedFrequency] = useState('yearly');\n  const [filteredIncomeStatements, setFilteredIncomeStatements] = useState([]);\n  useEffect(() => {\n    // Filter income statements based on the selected frequency\n    const filteredData = incomeStatements === null || incomeStatements === void 0 ? void 0 : incomeStatements.filter(statement => statement.type.toLowerCase() === selectedFrequency);\n    setFilteredIncomeStatements(filteredData);\n  }, [incomeStatements, selectedFrequency]);\n  if (!filteredIncomeStatements || filteredIncomeStatements.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No income statement data available for the selected frequency.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Define keys to filter out\n  const keysToFilterOut = ['id', 'filing_date', 'currency_symbol', 'type', 'general']; // Add keys you want to filter out here\n\n  // Function to filter out keys\n  const filteredKeys = Object.keys(filteredIncomeStatements[0]).filter(key => !keysToFilterOut.includes(key));\n\n  // Function to render table cells\n  const renderTableCell = (key, value) => {\n    if (keysToFilterOut.includes(key)) {\n      return null; // Return null for filtered keys\n    }\n\n    // Attempt to convert to a number if it's not already\n    const numericValue = typeof value === 'number' ? value : parseFloat(value);\n\n    // Check if the value is a number and not NaN\n    const displayedValue = !isNaN(numericValue) ? Math.round(numericValue).toLocaleString() // Format as a whole number\n    : value; // Keep original value if it's not a number\n\n    return /*#__PURE__*/_jsxDEV(TableCell, {\n      children: displayedValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: selectedFrequency === 'yearly' ? 'contained' : 'outlined',\n          onClick: () => setSelectedFrequency('yearly'),\n          sx: {\n            margin: 1\n          },\n          children: \"Yearly\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: selectedFrequency === 'quarterly' ? 'contained' : 'outlined',\n          onClick: () => setSelectedFrequency('quarterly'),\n          sx: {\n            margin: 1\n          },\n          children: \"Quarterly\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      sx: {\n        margin: 'auto',\n        overflow: 'hidden'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          bgcolor: 'primary.main',\n          p: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          sx: {\n            color: 'common.white',\n            textAlign: 'center'\n          },\n          children: \"Income Statement\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          \"aria-label\": \"Income Statement\",\n          sx: {\n            minWidth: 650\n          },\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: filteredKeys.map((key, index) => /*#__PURE__*/_jsxDEV(TableCell, {\n                sx: {\n                  fontWeight: 'bold'\n                },\n                children: key.replace(/_/g, ' ').toUpperCase()\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: filteredIncomeStatements.map((item, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n              children: filteredKeys.map(key => renderTableCell(key, item[key]) // Use the rendering function\n              )\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(IncomeStatements, \"ngVbVGfka7gw9rP5V5tZOTm7IU0=\");\n_c = IncomeStatements;\nexport default IncomeStatements;\nvar _c;\n$RefreshReg$(_c, \"IncomeStatements\");","map":{"version":3,"names":["React","useState","useEffect","Button","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Typography","Box","Grid","jsxDEV","_jsxDEV","Fragment","_Fragment","IncomeStatements","incomeStatements","_s","selectedFrequency","setSelectedFrequency","filteredIncomeStatements","setFilteredIncomeStatements","filteredData","filter","statement","type","toLowerCase","length","children","fileName","_jsxFileName","lineNumber","columnNumber","keysToFilterOut","filteredKeys","Object","keys","key","includes","renderTableCell","value","numericValue","parseFloat","displayedValue","isNaN","Math","round","toLocaleString","container","spacing","item","variant","onClick","sx","margin","elevation","overflow","bgcolor","p","color","textAlign","minWidth","map","index","fontWeight","replace","toUpperCase","_c","$RefreshReg$"],"sources":["C:/Users/David/Desktop/Websites/stocks/frontend/src/components/stockpage/IncomeStatements.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  Grid\r\n} from '@mui/material';\r\n\r\nconst IncomeStatements = ({ incomeStatements }) => {\r\n  const [selectedFrequency, setSelectedFrequency] = useState('yearly');\r\n  const [filteredIncomeStatements, setFilteredIncomeStatements] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Filter income statements based on the selected frequency\r\n    const filteredData = incomeStatements?.filter(statement => statement.type.toLowerCase() === selectedFrequency);\r\n    setFilteredIncomeStatements(filteredData);\r\n  }, [incomeStatements, selectedFrequency]);\r\n\r\n  if (!filteredIncomeStatements || filteredIncomeStatements.length === 0) {\r\n    return <div>No income statement data available for the selected frequency.</div>;\r\n  }\r\n\r\n  // Define keys to filter out\r\n  const keysToFilterOut = ['id', 'filing_date', 'currency_symbol', 'type', 'general']; // Add keys you want to filter out here\r\n\r\n  // Function to filter out keys\r\n  const filteredKeys = Object.keys(filteredIncomeStatements[0]).filter(key => !keysToFilterOut.includes(key));\r\n\r\n  // Function to render table cells\r\n  const renderTableCell = (key, value) => {\r\n    if (keysToFilterOut.includes(key)) {\r\n      return null; // Return null for filtered keys\r\n    }\r\n\r\n    // Attempt to convert to a number if it's not already\r\n    const numericValue = typeof value === 'number' ? value : parseFloat(value);\r\n\r\n    // Check if the value is a number and not NaN\r\n    const displayedValue = !isNaN(numericValue)\r\n      ? Math.round(numericValue).toLocaleString() // Format as a whole number\r\n      : value; // Keep original value if it's not a number\r\n\r\n    return (\r\n      <TableCell>\r\n        {displayedValue}\r\n      </TableCell>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* Buttons to select frequency */}\r\n      <Grid container spacing={2}>\r\n        <Grid item>\r\n          <Button\r\n            variant={selectedFrequency === 'yearly' ? 'contained' : 'outlined'}\r\n            onClick={() => setSelectedFrequency('yearly')}\r\n            sx={{ margin: 1 }}\r\n          >\r\n            Yearly\r\n          </Button>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button\r\n            variant={selectedFrequency === 'quarterly' ? 'contained' : 'outlined'}\r\n            onClick={() => setSelectedFrequency('quarterly')}\r\n            sx={{ margin: 1 }}\r\n          >\r\n            Quarterly\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Table to display filtered income statement data */}\r\n      <Paper elevation={3} sx={{ margin: 'auto', overflow: 'hidden' }}>\r\n        <Box sx={{ bgcolor: 'primary.main', p: 1 }}>\r\n          <Typography variant=\"subtitle1\" sx={{ color: 'common.white', textAlign: 'center' }}>Income Statement</Typography>\r\n        </Box>\r\n        <TableContainer>\r\n          <Table aria-label=\"Income Statement\" sx={{ minWidth: 650 }}>\r\n            <TableHead>\r\n              <TableRow>\r\n                {/* Dynamically create table header based on the filtered keys */}\r\n                {filteredKeys.map((key, index) => (\r\n                  <TableCell key={index} sx={{ fontWeight: 'bold' }}>{key.replace(/_/g, ' ').toUpperCase()}</TableCell>\r\n                ))}\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {filteredIncomeStatements.map((item, index) => (\r\n                <TableRow key={index}>\r\n                  {/* Dynamically create table cells based on the values of the income statement data */}\r\n                  {filteredKeys.map((key) => (\r\n                    renderTableCell(key, item[key]) // Use the rendering function\r\n                  ))}\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IncomeStatements;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}