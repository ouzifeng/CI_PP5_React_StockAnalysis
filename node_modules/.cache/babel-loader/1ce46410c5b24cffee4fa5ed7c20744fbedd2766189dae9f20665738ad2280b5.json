{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\David\\\\Desktop\\\\Websites\\\\stocks\\\\frontend\\\\src\\\\components\\\\stockpage\\\\IncomeStatements.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Button, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Typography, Box, Grid, Skeleton } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst IncomeStatements = ({\n  incomeStatements\n}) => {\n  _s();\n  const [selectedFrequency, setSelectedFrequency] = useState('yearly');\n  const [filteredIncomeStatements, setFilteredIncomeStatements] = useState([]);\n  useEffect(() => {\n    // Filter income statements based on the selected frequency\n    const filteredData = incomeStatements === null || incomeStatements === void 0 ? void 0 : incomeStatements.filter(statement => statement.type.toLowerCase() === selectedFrequency);\n    setFilteredIncomeStatements(filteredData);\n  }, [incomeStatements, selectedFrequency]);\n  if (!filteredIncomeStatements || filteredIncomeStatements.length === 0) {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      sx: {\n        margin: 'auto',\n        overflow: 'hidden'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          bgcolor: 'primary.main',\n          p: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          sx: {\n            color: 'common.white',\n            textAlign: 'center'\n          },\n          children: \"Income Statement\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          \"aria-label\": \"Income Statement\",\n          size: \"small\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: Array(6).fill(null).map((_, index) => /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(Skeleton, {\n                  variant: \"text\",\n                  width: 100,\n                  animation: \"wave\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 40,\n                  columnNumber: 21\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: Array(5).fill(null).map((_, rowIndex) => /*#__PURE__*/_jsxDEV(TableRow, {\n              children: Array(6).fill(null).map((_, cellIndex) => /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(Skeleton, {\n                  variant: \"text\",\n                  width: 100,\n                  animation: \"wave\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 51,\n                  columnNumber: 23\n                }, this)\n              }, cellIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 21\n              }, this))\n            }, rowIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Define keys to filter out\n  const keysToFilterOut = ['id', 'filing_date', 'currency_symbol', 'type', 'general', 'preferred_stock_and_other_adjustments', 'discontinued_operations', 'other_items', 'non_recurring', 'extraordinary_items', 'selling_and_marketing_expenses', 'minority_interest', 'effect_of_accounting_charges']; // Add keys you want to filter out here\n\n  // Function to filter out keys\n  const filteredKeys = Object.keys(filteredIncomeStatements[0]).filter(key => !keysToFilterOut.includes(key));\n\n  // Function to render table cells\n  const renderTableCell = (key, value) => {\n    // Define an array of keys that should be formatted differently\n    const keysToFormatAsDate = ['date']; // Add any other keys as needed\n\n    if (keysToFilterOut.includes(key)) {\n      return null; // Return null for filtered keys\n    }\n\n    // Check if the key should be formatted as a date\n    if (keysToFormatAsDate.includes(key)) {\n      return /*#__PURE__*/_jsxDEV(TableCell, {\n        children: [value, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this);\n    }\n\n    // Attempt to convert to a number if it's not already\n    const numericValue = typeof value === 'number' ? value : parseFloat(value);\n\n    // Check if the value is a number and not NaN\n    const displayedValue = !isNaN(numericValue) ? Math.round(numericValue).toLocaleString() // Format as a whole number\n    : value; // Keep the original value if it's not a number\n\n    return /*#__PURE__*/_jsxDEV(TableCell, {\n      children: displayedValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 1,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: selectedFrequency === 'yearly' ? 'contained' : 'outlined',\n          onClick: () => setSelectedFrequency('yearly'),\n          sx: {\n            margin: 1\n          },\n          children: \"Yearly\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: selectedFrequency === 'quarterly' ? 'contained' : 'outlined',\n          onClick: () => setSelectedFrequency('quarterly'),\n          sx: {\n            margin: 1\n          },\n          children: \"Quarterly\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      sx: {\n        margin: 'auto',\n        overflow: 'hidden'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          bgcolor: 'primary.main',\n          p: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          sx: {\n            color: 'common.white',\n            textAlign: 'center'\n          },\n          children: \"Income Statement\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          \"aria-label\": \"Income Statement\",\n          size: \"small\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: filteredKeys.map((key, index) => /*#__PURE__*/_jsxDEV(TableCell, {\n                sx: {\n                  fontWeight: 'bold'\n                },\n                className: \"MuiTableCell-sizeSmall\",\n                children: [\" \", key.replace(/_/g, ' ').toUpperCase()]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: filteredIncomeStatements.map((item, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n              children: filteredKeys.map(key => renderTableCell(key, item[key]) // Use the rendering function\n              )\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(IncomeStatements, \"ngVbVGfka7gw9rP5V5tZOTm7IU0=\");\n_c = IncomeStatements;\nexport default IncomeStatements;\nvar _c;\n$RefreshReg$(_c, \"IncomeStatements\");","map":{"version":3,"names":["React","useState","useEffect","Button","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Typography","Box","Grid","Skeleton","jsxDEV","_jsxDEV","Fragment","_Fragment","IncomeStatements","incomeStatements","_s","selectedFrequency","setSelectedFrequency","filteredIncomeStatements","setFilteredIncomeStatements","filteredData","filter","statement","type","toLowerCase","length","elevation","sx","margin","overflow","children","bgcolor","p","variant","color","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","size","Array","fill","map","_","index","width","animation","rowIndex","cellIndex","keysToFilterOut","filteredKeys","Object","keys","key","includes","renderTableCell","value","keysToFormatAsDate","numericValue","parseFloat","displayedValue","isNaN","Math","round","toLocaleString","container","spacing","item","onClick","fontWeight","className","replace","toUpperCase","_c","$RefreshReg$"],"sources":["C:/Users/David/Desktop/Websites/stocks/frontend/src/components/stockpage/IncomeStatements.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  Grid,\r\n  Skeleton,\r\n} from '@mui/material';\r\n\r\nconst IncomeStatements = ({ incomeStatements }) => {\r\n  const [selectedFrequency, setSelectedFrequency] = useState('yearly');\r\n  const [filteredIncomeStatements, setFilteredIncomeStatements] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Filter income statements based on the selected frequency\r\n    const filteredData = incomeStatements?.filter(statement => statement.type.toLowerCase() === selectedFrequency);\r\n    setFilteredIncomeStatements(filteredData);\r\n  }, [incomeStatements, selectedFrequency]);\r\n\r\n  if (!filteredIncomeStatements || filteredIncomeStatements.length === 0) {\r\n    return (\r\n      <Paper elevation={3} sx={{ margin: 'auto', overflow: 'hidden' }}>\r\n        <Box sx={{ bgcolor: 'primary.main', p: 1 }}>\r\n          <Typography variant=\"subtitle1\" sx={{ color: 'common.white', textAlign: 'center' }}>Income Statement</Typography>\r\n        </Box>\r\n        <TableContainer>\r\n          <Table aria-label=\"Income Statement\" size=\"small\"> {/* Use size=\"small\" for the table */}\r\n            <TableHead>\r\n              <TableRow>\r\n                {/* Display skeleton loaders for table headers */}\r\n                {Array(6).fill(null).map((_, index) => (\r\n                  <TableCell key={index}>\r\n                    <Skeleton variant=\"text\" width={100} animation=\"wave\" />\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {/* Display multiple rows of skeleton loaders */}\r\n              {Array(5).fill(null).map((_, rowIndex) => (\r\n                <TableRow key={rowIndex}>\r\n                  {Array(6).fill(null).map((_, cellIndex) => (\r\n                    <TableCell key={cellIndex}>\r\n                      <Skeleton variant=\"text\" width={100} animation=\"wave\" />\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Paper>\r\n    );\r\n  }\r\n\r\n  // Define keys to filter out\r\n  const keysToFilterOut = ['id', 'filing_date', 'currency_symbol', 'type', 'general', 'preferred_stock_and_other_adjustments', 'discontinued_operations', 'other_items', 'non_recurring', 'extraordinary_items', 'selling_and_marketing_expenses', 'minority_interest', 'effect_of_accounting_charges']; // Add keys you want to filter out here\r\n\r\n  // Function to filter out keys\r\n  const filteredKeys = Object.keys(filteredIncomeStatements[0]).filter(key => !keysToFilterOut.includes(key));\r\n\r\n  // Function to render table cells\r\n  const renderTableCell = (key, value) => {\r\n    // Define an array of keys that should be formatted differently\r\n    const keysToFormatAsDate = ['date']; // Add any other keys as needed\r\n\r\n    if (keysToFilterOut.includes(key)) {\r\n      return null; // Return null for filtered keys\r\n    }\r\n\r\n    // Check if the key should be formatted as a date\r\n    if (keysToFormatAsDate.includes(key)) {\r\n      return (\r\n        <TableCell>\r\n          {value} {/* Assuming 'value' is a date in the desired format */}\r\n        </TableCell>\r\n      );\r\n    }\r\n\r\n    // Attempt to convert to a number if it's not already\r\n    const numericValue = typeof value === 'number' ? value : parseFloat(value);\r\n\r\n    // Check if the value is a number and not NaN\r\n    const displayedValue = !isNaN(numericValue)\r\n      ? Math.round(numericValue).toLocaleString() // Format as a whole number\r\n      : value; // Keep the original value if it's not a number\r\n\r\n    return (\r\n      <TableCell>\r\n        {displayedValue}\r\n      </TableCell>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* Buttons to select frequency */}\r\n      <Grid container spacing={1}>\r\n        <Grid item>\r\n          <Button\r\n            variant={selectedFrequency === 'yearly' ? 'contained' : 'outlined'}\r\n            onClick={() => setSelectedFrequency('yearly')}\r\n            sx={{ margin: 1 }}\r\n          >\r\n            Yearly\r\n          </Button>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button\r\n            variant={selectedFrequency === 'quarterly' ? 'contained' : 'outlined'}\r\n            onClick={() => setSelectedFrequency('quarterly')}\r\n            sx={{ margin: 1 }}\r\n          >\r\n            Quarterly\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Table to display filtered income statement data */}\r\n      <Paper elevation={3} sx={{ margin: 'auto', overflow: 'hidden' }}>\r\n        <Box sx={{ bgcolor: 'primary.main', p: 1 }}>\r\n          <Typography variant=\"subtitle1\" sx={{ color: 'common.white', textAlign: 'center' }}>Income Statement</Typography>\r\n        </Box>\r\n        <TableContainer>\r\n          <Table aria-label=\"Income Statement\" size=\"small\"> {/* Use size=\"small\" for the table */}\r\n            <TableHead>\r\n              <TableRow>\r\n                {/* Dynamically create table header based on the filtered keys */}\r\n                {filteredKeys.map((key, index) => (\r\n                  <TableCell key={index} sx={{ fontWeight: 'bold' }} className=\"MuiTableCell-sizeSmall\"> {/* Apply class for sizeSmall */}\r\n                    {key.replace(/_/g, ' ').toUpperCase()}\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {filteredIncomeStatements.map((item, index) => (\r\n                <TableRow key={index}>\r\n                  {/* Dynamically create table cells based on the values of the income statement data */}\r\n                  {filteredKeys.map((key) => (\r\n                    renderTableCell(key, item[key]) // Use the rendering function\r\n                  ))}\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IncomeStatements;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}