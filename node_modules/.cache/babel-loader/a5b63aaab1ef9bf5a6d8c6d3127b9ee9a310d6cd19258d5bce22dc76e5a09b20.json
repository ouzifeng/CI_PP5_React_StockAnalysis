{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\David\\\\Desktop\\\\Websites\\\\stocks\\\\frontend\\\\src\\\\components\\\\stockpage\\\\Ticker.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Skeleton } from '@mui/material'; // Import Skeleton from Material-UI\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Ticker = ({\n  className\n}) => {\n  _s();\n  const containerRef = useRef();\n  const [isLoading, setIsLoading] = useState(true); // Add loading state\n\n  useEffect(() => {\n    // Delay the script injection until after the current call stack clears\n    const timeoutId = setTimeout(() => {\n      if (containerRef.current) {\n        // Clear any existing content\n        containerRef.current.innerHTML = '';\n\n        // Create script element\n        const script = document.createElement('script');\n        script.src = 'https://s3.tradingview.com/external-embedding/embed-widget-tickers.js';\n        script.async = true;\n        script.type = 'text/javascript';\n        script.innerHTML = JSON.stringify({\n          \"symbols\": [{\n            \"proName\": \"FOREXCOM:SPXUSD\",\n            \"title\": \"S&P 500\"\n          }, {\n            \"description\": \"NASDAQ\",\n            \"proName\": \"NASDAQ:IXIC\"\n          }, {\n            \"description\": \"FTSE 100\",\n            \"proName\": \"SPREADEX:FTSE\"\n          }, {\n            \"description\": \"RUSSELL 2000\",\n            \"proName\": \"CAPITALCOM:RTY\"\n          }, {\n            \"description\": \"DAX\",\n            \"proName\": \"XETR:DAX\"\n          }, {\n            \"description\": \"DAX\",\n            \"proName\": \"XETR:DAX\"\n          }],\n          \"isTransparent\": false,\n          \"showSymbolLogo\": false,\n          \"colorTheme\": \"light\",\n          \"locale\": \"en\"\n        });\n\n        // Append script to the container\n        containerRef.current.appendChild(script);\n\n        // Set loading to false once script is loaded\n        script.onload = () => {\n          setIsLoading(false);\n        };\n      }\n    }, 0);\n\n    // Cleanup function to remove script when component unmounts\n    return () => {\n      clearTimeout(timeoutId);\n      if (containerRef.current) {\n        const script = containerRef.current.querySelector('script');\n        if (script) {\n          containerRef.current.removeChild(script);\n        }\n      }\n    };\n  }, []); // Empty dependency array ensures the effect runs once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tradingview-widget-container\",\n    ref: containerRef,\n    children: isLoading ?\n    /*#__PURE__*/\n    // Render Material-UI Skeleton loader while loading\n    _jsxDEV(Skeleton, {\n      variant: \"rect\",\n      width: \"100%\",\n      height: \"100%\",\n      animation: \"wave\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tradingview-widget-container__widget\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tradingview-widget-copyright\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(Ticker, \"63rXg+OwV8PHpVKMFA7xK9AzNBE=\");\n_c = Ticker;\nexport default Ticker;\nvar _c;\n$RefreshReg$(_c, \"Ticker\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Skeleton","jsxDEV","_jsxDEV","Fragment","_Fragment","Ticker","className","_s","containerRef","isLoading","setIsLoading","timeoutId","setTimeout","current","innerHTML","script","document","createElement","src","async","type","JSON","stringify","appendChild","onload","clearTimeout","querySelector","removeChild","ref","children","variant","width","height","animation","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/David/Desktop/Websites/stocks/frontend/src/components/stockpage/Ticker.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { Skeleton } from '@mui/material'; // Import Skeleton from Material-UI\r\n\r\nconst Ticker = ({ className }) => {\r\n  const containerRef = useRef();\r\n  const [isLoading, setIsLoading] = useState(true); // Add loading state\r\n\r\n  useEffect(() => {\r\n    // Delay the script injection until after the current call stack clears\r\n    const timeoutId = setTimeout(() => {\r\n      if (containerRef.current) {\r\n        // Clear any existing content\r\n        containerRef.current.innerHTML = '';\r\n\r\n        // Create script element\r\n        const script = document.createElement('script');\r\n        script.src = 'https://s3.tradingview.com/external-embedding/embed-widget-tickers.js';\r\n        script.async = true;\r\n        script.type = 'text/javascript';\r\n        script.innerHTML = JSON.stringify({\r\n          \"symbols\": [\r\n            {\r\n              \"proName\": \"FOREXCOM:SPXUSD\",\r\n              \"title\": \"S&P 500\"\r\n            },\r\n            {\r\n              \"description\": \"NASDAQ\",\r\n              \"proName\": \"NASDAQ:IXIC\"\r\n            },\r\n            {\r\n              \"description\": \"FTSE 100\",\r\n              \"proName\": \"SPREADEX:FTSE\"\r\n            },\r\n            {\r\n              \"description\": \"RUSSELL 2000\",\r\n              \"proName\": \"CAPITALCOM:RTY\"\r\n            },\r\n            {\r\n              \"description\": \"DAX\",\r\n              \"proName\": \"XETR:DAX\"\r\n            },\r\n            {\r\n              \"description\": \"DAX\",\r\n              \"proName\": \"XETR:DAX\"\r\n            }\r\n          ],\r\n          \"isTransparent\": false,\r\n          \"showSymbolLogo\": false,\r\n          \"colorTheme\": \"light\",\r\n          \"locale\": \"en\"\r\n        });\r\n\r\n        // Append script to the container\r\n        containerRef.current.appendChild(script);\r\n\r\n        // Set loading to false once script is loaded\r\n        script.onload = () => {\r\n          setIsLoading(false);\r\n        };\r\n      }\r\n    }, 0);\r\n\r\n    // Cleanup function to remove script when component unmounts\r\n    return () => {\r\n      clearTimeout(timeoutId);\r\n      if (containerRef.current) {\r\n        const script = containerRef.current.querySelector('script');\r\n        if (script) {\r\n          containerRef.current.removeChild(script);\r\n        }\r\n      }\r\n    };\r\n  }, []); // Empty dependency array ensures the effect runs once on mount\r\n\r\n  return (\r\n    <div className=\"tradingview-widget-container\" ref={containerRef}>\r\n      {isLoading ? ( // Render Material-UI Skeleton loader while loading\r\n        <Skeleton variant=\"rect\" width=\"100%\" height=\"100%\" animation=\"wave\" />\r\n      ) : (\r\n        <>\r\n          <div className=\"tradingview-widget-container__widget\"></div>\r\n          <div className=\"tradingview-widget-copyright\"></div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Ticker;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}