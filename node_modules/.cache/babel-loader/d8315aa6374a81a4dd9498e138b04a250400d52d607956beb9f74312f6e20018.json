{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\David\\\\Desktop\\\\Websites\\\\stocks\\\\frontend\\\\src\\\\components\\\\stockpage\\\\Ticker.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Grid from '@mui/material/Grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Ticker = () => {\n  _s();\n  const [stocks, setStocks] = useState([]);\n  useEffect(() => {\n    // Fetch stock data from your API\n    fetch('YOUR_API_ENDPOINT').then(response => response.json()).then(data => {\n      // Process the data and set it in the state\n      const processedData = data.map(stock => ({\n        ...stock,\n        color: stock.Percent < 0 ? 'red' : stock.Percent > 0 ? 'green' : 'black'\n      }));\n      setStocks(processedData);\n    }).catch(error => console.error('Error fetching stock data:', error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ticker-container\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: stocks.map((stock, index) => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 2,\n        className: \"stock-grid-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `stock-card ${stock.color}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stock-name\",\n            children: stock.Name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stock-price\",\n            children: stock.Price\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stock-percent\",\n            children: [stock.Percent, \"% \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"arrow\",\n              children: \"\\u25B2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 34\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }, this), index < stocks.length - 1 && /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 43\n        }, this), \" \"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(Ticker, \"ckkB5iKANHozGm/BUdCimNAdz7k=\");\n_c = Ticker;\nexport default Ticker;\nvar _c;\n$RefreshReg$(_c, \"Ticker\");","map":{"version":3,"names":["React","useEffect","useState","Grid","jsxDEV","_jsxDEV","Ticker","_s","stocks","setStocks","fetch","then","response","json","data","processedData","map","stock","color","Percent","catch","error","console","className","children","container","spacing","index","item","xs","md","Name","fileName","_jsxFileName","lineNumber","columnNumber","Price","length","_c","$RefreshReg$"],"sources":["C:/Users/David/Desktop/Websites/stocks/frontend/src/components/stockpage/Ticker.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Grid from '@mui/material/Grid';\r\n\r\n\r\nconst Ticker = () => {\r\n  const [stocks, setStocks] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch stock data from your API\r\n    fetch('YOUR_API_ENDPOINT')\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        // Process the data and set it in the state\r\n        const processedData = data.map((stock) => ({\r\n          ...stock,\r\n          color: stock.Percent < 0 ? 'red' : stock.Percent > 0 ? 'green' : 'black',\r\n        }));\r\n        setStocks(processedData);\r\n      })\r\n      .catch((error) => console.error('Error fetching stock data:', error));\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"ticker-container\">\r\n      <Grid container spacing={2}>\r\n        {stocks.map((stock, index) => (\r\n          <Grid item xs={12} md={2} key={index} className=\"stock-grid-item\">\r\n            <div className={`stock-card ${stock.color}`}>\r\n              <div className=\"stock-name\">\r\n                {stock.Name}\r\n              </div>\r\n              <div className=\"stock-price\">\r\n                {stock.Price}\r\n              </div>\r\n              <div className=\"stock-percent\">\r\n                {stock.Percent}% <span className=\"arrow\">â–²</span>\r\n              </div>\r\n            </div>\r\n            {index < stocks.length - 1 && <hr />} {/* Divider */}\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Ticker;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}