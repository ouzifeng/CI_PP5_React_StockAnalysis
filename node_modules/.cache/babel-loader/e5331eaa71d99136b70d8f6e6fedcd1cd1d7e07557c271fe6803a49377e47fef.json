{"ast":null,"code":"import React,{useState,useEffect}from'react';import axios from'axios';import{Slider,Typography,Table,TableBody,TableCell,TableHead,TableRow,Paper}from'@mui/material';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";function DividendScreener(){const[stocks,setStocks]=useState([]);const[dividendThreshold,setDividendThreshold]=useState(0);useEffect(()=>{const fetchData=async()=>{try{const response=await axios.get('https://django-stocks-ecbc6bc5e208.herokuapp.com/api/stocks');setStocks(response.data);}catch(error){console.error('Error fetching stocks:',error);}};fetchData();},[]);const handleSliderChange=(event,newValue)=>{setDividendThreshold(newValue);};const filteredStocks=stocks.filter(stock=>stock.dividendYield>=dividendThreshold);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(Typography,{id:\"dividend-slider\",gutterBottom:true,children:[\"Dividend Yield Threshold: \",dividendThreshold,\"%\"]}),/*#__PURE__*/_jsx(Slider,{value:dividendThreshold,onChange:handleSliderChange,\"aria-labelledby\":\"dividend-slider\",valueLabelDisplay:\"auto\",step:0.1,marks:true,min:0,max:20// Adjust based on your data\n}),/*#__PURE__*/_jsx(Paper,{children:/*#__PURE__*/_jsxs(Table,{children:[/*#__PURE__*/_jsx(TableHead,{children:/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{children:\"Name\"}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:\"Dividend Yield (%)\"}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:\"Market Cap\"}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:\"P/E Ratio\"})]})}),/*#__PURE__*/_jsx(TableBody,{children:filteredStocks.map(stock=>/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{component:\"th\",scope:\"row\",children:stock.name}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:stock.dividendYield}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:stock.marketCap}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:stock.peRatio})]},stock.id))})]})})]});}export default DividendScreener;","map":{"version":3,"names":["React","useState","useEffect","axios","Slider","Typography","Table","TableBody","TableCell","TableHead","TableRow","Paper","jsxs","_jsxs","jsx","_jsx","DividendScreener","stocks","setStocks","dividendThreshold","setDividendThreshold","fetchData","response","get","data","error","console","handleSliderChange","event","newValue","filteredStocks","filter","stock","dividendYield","children","id","gutterBottom","value","onChange","valueLabelDisplay","step","marks","min","max","align","map","component","scope","name","marketCap","peRatio"],"sources":["C:/Users/David/Desktop/Websites/stocks/frontend/src/pages/DividendScreener.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Slider, Typography, Table, TableBody, TableCell, TableHead, TableRow, Paper } from '@mui/material';\r\n\r\nfunction DividendScreener() {\r\n    const [stocks, setStocks] = useState([]);\r\n    const [dividendThreshold, setDividendThreshold] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await axios.get('https://django-stocks-ecbc6bc5e208.herokuapp.com/api/stocks');\r\n                setStocks(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching stocks:', error);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    const handleSliderChange = (event, newValue) => {\r\n        setDividendThreshold(newValue);\r\n    };\r\n\r\n    const filteredStocks = stocks.filter(stock => stock.dividendYield >= dividendThreshold);\r\n\r\n    return (\r\n        <div>\r\n            <Typography id=\"dividend-slider\" gutterBottom>\r\n                Dividend Yield Threshold: {dividendThreshold}%\r\n            </Typography>\r\n            <Slider\r\n                value={dividendThreshold}\r\n                onChange={handleSliderChange}\r\n                aria-labelledby=\"dividend-slider\"\r\n                valueLabelDisplay=\"auto\"\r\n                step={0.1}\r\n                marks\r\n                min={0}\r\n                max={20} // Adjust based on your data\r\n            />\r\n            <Paper>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Name</TableCell>\r\n                            <TableCell align=\"right\">Dividend Yield (%)</TableCell>\r\n                            <TableCell align=\"right\">Market Cap</TableCell>\r\n                            <TableCell align=\"right\">P/E Ratio</TableCell>\r\n                            {/* Add more columns as needed */}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {filteredStocks.map((stock) => (\r\n                            <TableRow key={stock.id}>\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {stock.name}\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">{stock.dividendYield}</TableCell>\r\n                                <TableCell align=\"right\">{stock.marketCap}</TableCell>\r\n                                <TableCell align=\"right\">{stock.peRatio}</TableCell>\r\n                                {/* Add more cells as needed */}\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DividendScreener;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}