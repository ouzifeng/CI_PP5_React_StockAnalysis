{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\David\\\\Desktop\\\\Websites\\\\stocks\\\\frontend\\\\src\\\\pages\\\\ResetPassword.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { TextField, Button, Typography, Box, Paper } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResetPassword = () => {\n  _s();\n  const {\n    uidb64,\n    token\n  } = useParams(); // Get uidb64 and token from URL params\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [message, setMessage] = useState('');\n  const [isError, setIsError] = useState(false);\n  const [submitting, setSubmitting] = useState(false);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (newPassword !== confirmPassword) {\n      setMessage(\"Passwords do not match.\");\n      setIsError(true);\n      return;\n    }\n    setSubmitting(true);\n    try {\n      const apiUrl = 'https://django-stocks-ecbc6bc5e208.herokuapp.com/auth/custom/auth/password/reset/confirm/';\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const formData = {\n        new_password1: newPassword,\n        new_password2: confirmPassword,\n        uid: uidb64,\n        // send it as is, don't decode\n        token\n      };\n      console.log(\"Decoded UID:\", atob(uidb64));\n      const response = await axios.post(apiUrl, formData, config);\n      setMessage(response.data.message);\n      setIsError(false);\n    } catch (error) {\n      setMessage(error.response.data.error);\n      setIsError(true);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      height: '100vh'\n    },\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      sx: {\n        padding: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        mb: 2,\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"New Password\",\n          variant: \"outlined\",\n          fullWidth: true,\n          type: \"password\",\n          value: newPassword,\n          onChange: e => setNewPassword(e.target.value),\n          margin: \"normal\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Confirm Password\",\n          variant: \"outlined\",\n          fullWidth: true,\n          type: \"password\",\n          value: confirmPassword,\n          onChange: e => setConfirmPassword(e.target.value),\n          margin: \"normal\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          type: \"submit\",\n          disabled: submitting,\n          children: submitting ? 'Resetting...' : 'Reset Password'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), message && /*#__PURE__*/_jsxDEV(Typography, {\n          color: isError ? 'error' : 'primary',\n          mt: 2,\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n_s(ResetPassword, \"OHYtlMEExRn+NFwnqYoFQz9WQrs=\", false, function () {\n  return [useParams];\n});\n_c = ResetPassword;\nexport default ResetPassword;\nvar _c;\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"names":["React","useState","axios","useParams","TextField","Button","Typography","Box","Paper","jsxDEV","_jsxDEV","ResetPassword","_s","uidb64","token","newPassword","setNewPassword","confirmPassword","setConfirmPassword","message","setMessage","isError","setIsError","submitting","setSubmitting","handleSubmit","e","preventDefault","apiUrl","config","headers","formData","new_password1","new_password2","uid","console","log","atob","response","post","data","error","sx","display","justifyContent","alignItems","height","children","elevation","padding","variant","mb","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","label","fullWidth","type","value","onChange","target","margin","required","disabled","color","mt","_c","$RefreshReg$"],"sources":["C:/Users/David/Desktop/Websites/stocks/frontend/src/pages/ResetPassword.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\nimport { TextField, Button, Typography, Box, Paper } from \"@mui/material\";\r\n\r\nconst ResetPassword = () => {\r\n    const { uidb64, token } = useParams(); // Get uidb64 and token from URL params\r\n    const [newPassword, setNewPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [isError, setIsError] = useState(false);\r\n    const [submitting, setSubmitting] = useState(false);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (newPassword !== confirmPassword) {\r\n            setMessage(\"Passwords do not match.\");\r\n            setIsError(true);\r\n            return;\r\n        }\r\n\r\n        setSubmitting(true);\r\n\r\n        try {\r\n            const apiUrl = 'https://django-stocks-ecbc6bc5e208.herokuapp.com/auth/custom/auth/password/reset/confirm/';\r\n\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                }\r\n            };\r\n\r\n            const formData = {\r\n                new_password1: newPassword,\r\n                new_password2: confirmPassword,\r\n                uid: uidb64, // send it as is, don't decode\r\n                token,\r\n            };\r\n\r\n            console.log(\"Decoded UID:\", atob(uidb64));\r\n\r\n            const response = await axios.post(apiUrl, formData, config);\r\n            setMessage(response.data.message);\r\n            setIsError(false);\r\n        } catch (error) {\r\n            setMessage(error.response.data.error);\r\n            setIsError(true);\r\n        } finally {\r\n            setSubmitting(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\r\n            <Paper elevation={3} sx={{ padding: 4 }}>\r\n                <Typography variant=\"h5\" mb={2}>Reset Password</Typography>\r\n                <form onSubmit={handleSubmit}>\r\n                    <TextField\r\n                        label=\"New Password\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        type=\"password\"\r\n                        value={newPassword}\r\n                        onChange={(e) => setNewPassword(e.target.value)}\r\n                        margin=\"normal\"\r\n                        required\r\n                    />\r\n                    <TextField\r\n                        label=\"Confirm Password\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        type=\"password\"\r\n                        value={confirmPassword}\r\n                        onChange={(e) => setConfirmPassword(e.target.value)}\r\n                        margin=\"normal\"\r\n                        required\r\n                    />\r\n                    <Button variant=\"contained\" type=\"submit\" disabled={submitting}>\r\n                        {submitting ? 'Resetting...' : 'Reset Password'}\r\n                    </Button>\r\n                    {message && (\r\n                        <Typography color={isError ? 'error' : 'primary'} mt={2}>\r\n                            {message}\r\n                        </Typography>\r\n                    )}\r\n                </form>\r\n            </Paper>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default ResetPassword;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}