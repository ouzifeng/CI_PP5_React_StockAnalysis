{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\David\\\\Desktop\\\\Websites\\\\stocks\\\\frontend\\\\src\\\\components\\\\stockpage\\\\Ticker.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Ticker = () => {\n  _s();\n  const [stocks, setStocks] = useState([]);\n  const [colors, setColors] = useState({}); // Store color (red or green) for each stock\n\n  useEffect(() => {\n    // Fetch stock data from your API\n    fetch('https://script.googleusercontent.com/macros/echo?user_content_key=c8tWHwXIx4vz_zdJewMMVNZzcj-52oWRSjf42V0rQwnxCSE5S7SO4HyeWAn9Jl_lssgsdwW3o8MTnhWLGQwtQRAh0uNuO2Sgm5_BxDlH2jW0nuo2oDemN9CCS2h10ox_1xSncGQajx_ryfhECjZEnPeTRfTtTl31E7n6HlPkwXGCVvT2mUROOOaCQFgyCI-jNC3U55BpMAcbf-OKdJkmAjb8iiC6b9mkVfxHOPGXTDlwvughaiZuIQ&lib=MRK9JCV_hCBBxn1ilxmzDhCwsu2EIHoHF').then(response => response.json()).then(data => {\n      // Process the data and set it in the state\n      const processedData = data.map(stock => {\n        // Determine the color based on percent change\n        const color = stock.Percent < 0 ? 'red' : 'green';\n        return {\n          ...stock,\n          color\n        };\n      });\n      setStocks(processedData);\n    }).catch(error => console.error('Error fetching stock data:', error));\n  }, []);\n  const stockCardStyle = {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: '10px',\n    borderRadius: '5px',\n    margin: '5px',\n    boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',\n    transition: 'background-color 0.3s'\n  };\n  const redStyle = {\n    backgroundColor: 'red',\n    color: 'white'\n  };\n  const greenStyle = {\n    backgroundColor: 'green',\n    color: 'white'\n  };\n  const stockNameStyle = {\n    fontSize: '16px',\n    fontWeight: 'bold'\n  };\n  const stockPriceStyle = {\n    fontSize: '14px',\n    margin: '5px 0'\n  };\n  const stockPercentStyle = {\n    fontSize: '14px'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ticker-tape\",\n    style: {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    children: stocks.map((stock, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stock-card\",\n      style: {\n        ...stockCardStyle,\n        ...(stock.color === 'red' ? redStyle : greenStyle)\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stock-name\",\n        style: stockNameStyle,\n        children: stock.Name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stock-price\",\n        style: stockPriceStyle,\n        children: stock.Price\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stock-percent\",\n        style: stockPercentStyle,\n        children: [stock.Percent, \"% \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"arrow\",\n          children: \"\\u25B2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(Ticker, \"4l+Fs0d0GW5rDAl9A17ocpT6cYs=\");\n_c = Ticker;\nexport default Ticker;\nvar _c;\n$RefreshReg$(_c, \"Ticker\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Ticker","_s","stocks","setStocks","colors","setColors","fetch","then","response","json","data","processedData","map","stock","color","Percent","catch","error","console","stockCardStyle","display","flexDirection","alignItems","padding","borderRadius","margin","boxShadow","transition","redStyle","backgroundColor","greenStyle","stockNameStyle","fontSize","fontWeight","stockPriceStyle","stockPercentStyle","className","style","flexWrap","children","index","Name","fileName","_jsxFileName","lineNumber","columnNumber","Price","_c","$RefreshReg$"],"sources":["C:/Users/David/Desktop/Websites/stocks/frontend/src/components/stockpage/Ticker.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst Ticker = () => {\r\n  const [stocks, setStocks] = useState([]);\r\n  const [colors, setColors] = useState({}); // Store color (red or green) for each stock\r\n\r\n  useEffect(() => {\r\n    // Fetch stock data from your API\r\n    fetch('https://script.googleusercontent.com/macros/echo?user_content_key=c8tWHwXIx4vz_zdJewMMVNZzcj-52oWRSjf42V0rQwnxCSE5S7SO4HyeWAn9Jl_lssgsdwW3o8MTnhWLGQwtQRAh0uNuO2Sgm5_BxDlH2jW0nuo2oDemN9CCS2h10ox_1xSncGQajx_ryfhECjZEnPeTRfTtTl31E7n6HlPkwXGCVvT2mUROOOaCQFgyCI-jNC3U55BpMAcbf-OKdJkmAjb8iiC6b9mkVfxHOPGXTDlwvughaiZuIQ&lib=MRK9JCV_hCBBxn1ilxmzDhCwsu2EIHoHF')\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        // Process the data and set it in the state\r\n        const processedData = data.map((stock) => {\r\n          // Determine the color based on percent change\r\n          const color = stock.Percent < 0 ? 'red' : 'green';\r\n          return {\r\n            ...stock,\r\n            color,\r\n          };\r\n        });\r\n        setStocks(processedData);\r\n      })\r\n      .catch((error) => console.error('Error fetching stock data:', error));\r\n  }, []);\r\n\r\n  const stockCardStyle = {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    padding: '10px',\r\n    borderRadius: '5px',\r\n    margin: '5px',\r\n    boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',\r\n    transition: 'background-color 0.3s',\r\n  };\r\n\r\n  const redStyle = {\r\n    backgroundColor: 'red',\r\n    color: 'white',\r\n  };\r\n\r\n  const greenStyle = {\r\n    backgroundColor: 'green',\r\n    color: 'white',\r\n  };\r\n\r\n  const stockNameStyle = {\r\n    fontSize: '16px',\r\n    fontWeight: 'bold',\r\n  };\r\n\r\n  const stockPriceStyle = {\r\n    fontSize: '14px',\r\n    margin: '5px 0',\r\n  };\r\n\r\n  const stockPercentStyle = {\r\n    fontSize: '14px',\r\n  };\r\n\r\n  return (\r\n    <div className=\"ticker-tape\" style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n      {stocks.map((stock, index) => (\r\n        <div\r\n          key={index}\r\n          className=\"stock-card\"\r\n          style={{\r\n            ...stockCardStyle,\r\n            ...(stock.color === 'red' ? redStyle : greenStyle),\r\n          }}\r\n        >\r\n          <div className=\"stock-name\" style={stockNameStyle}>\r\n            {stock.Name}\r\n          </div>\r\n          <div className=\"stock-price\" style={stockPriceStyle}>\r\n            {stock.Price}\r\n          </div>\r\n          <div className=\"stock-percent\" style={stockPercentStyle}>\r\n            {stock.Percent}% <span className=\"arrow\">â–²</span>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Ticker;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}