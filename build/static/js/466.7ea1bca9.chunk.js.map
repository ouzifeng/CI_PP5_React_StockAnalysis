{"version":3,"file":"static/js/466.7ea1bca9.chunk.js","mappings":"8OAGA,MAuEA,EAvEuBA,IAAiC,IAAhC,cAAEC,EAAa,QAAEC,GAASF,EAChD,MAAMG,EAAiBD,EAAQE,iBAAmB,IA6B5CC,EAAYA,CAACC,EAAMC,KACvB,MAAMC,EAAWP,EAAcK,EAAKC,KAC9BE,EAAQD,EAnBIE,EAACH,EAAKE,KAExB,MAAME,EAAiC,kBAAVF,GAAuBG,MAAMH,GAA8BA,EAApBI,WAAWJ,GAE/E,GAAY,qBAARF,EAA4B,CAE9B,MAAMO,EAAeH,EAAe,IACpC,MAAM,GAANI,OAAUZ,GAAcY,OAAGD,EAAaE,QAAQ,GAAE,IACpD,CAAO,MAAI,CAAC,cAAe,aAAc,kBAAmB,kBAAkBC,SAASV,GAE9EI,EAAaK,QAAQ,GAGI,kBAAjBL,EAAyB,GAAAI,OAAOJ,EAAaK,QAAQ,IAAOP,CAC7E,EAKyBC,CAAYJ,EAAKC,IAAKC,GAAY,MAE3D,OACEU,EAAAA,EAAAA,MAACC,EAAAA,EAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,UAAU,KAAKC,MAAM,MAAKJ,SAAEd,EAAKmB,SAC5CJ,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACI,MAAM,QAAQC,GAAI,CAAEC,WAAY,QAASR,SACjDX,MAHUF,EAKJ,EAIf,OACEW,EAAAA,EAAAA,MAACW,EAAAA,EAAK,CAACC,UAAW,EAAGH,GAAI,CAAEI,OAAQ,OAAQC,SAAU,UAAWZ,SAAA,EAC9DC,EAAAA,EAAAA,KAACY,EAAAA,EAAG,CAACN,GAAI,CAAEO,QAAS,eAAgBC,EAAG,GAAIf,UACzCC,EAAAA,EAAAA,KAACe,EAAAA,EAAU,CAACC,QAAQ,YAAYV,GAAI,CAAEW,MAAO,eAAgBC,UAAW,UAAWnB,SAAC,iBAEtFC,EAAAA,EAAAA,KAACmB,EAAAA,EAAc,CAAApB,UACbC,EAAAA,EAAAA,KAACoB,EAAAA,EAAK,CAAC,aAAW,kBAAiBrB,UACjCC,EAAAA,EAAAA,KAACqB,EAAAA,EAAS,CAAAtB,SACPnB,EAjDY,CACrB,CAAEwB,MAAO,eAAgBlB,IAAK,eAC9B,CAAEkB,MAAO,cAAelB,IAAK,cAC7B,CAAEkB,MAAO,uBAAwBlB,IAAK,mBACtC,CAAEkB,MAAO,sBAAuBlB,IAAK,kBACrC,CAAEkB,MAAO,mBAAoBlB,IAAK,oBAClC,CAAEkB,MAAO,8BAA+BlB,IAAK,4BAC7C,CAAEkB,MAAO,6BAA8BlB,IAAK,4BA2CnBoC,KAAI,CAACrC,EAAMsC,IAAUvC,EAAUC,EAAMsC,MAEpD1B,EAAAA,EAAAA,MAACC,EAAAA,EAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAAAF,UACRC,EAAAA,EAAAA,KAACwB,EAAAA,EAAQ,CAACR,QAAQ,OAAOS,MAAO,SAElCzB,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAAAF,UACRC,EAAAA,EAAAA,KAACwB,EAAAA,EAAQ,CAACR,QAAQ,OAAOS,MAAO,mBAOtC,C","sources":["components/stockpage/ValuationTable.js"],"sourcesContent":["import React from 'react';\r\nimport { Typography, Table, TableBody, TableCell, TableContainer, TableRow, Paper, Box, Skeleton } from '@mui/material';\r\n\r\nconst ValuationTable = ({ valuationData, general }) => {\r\n  const currencySymbol = general.currency_symbol || '$';\r\n\r\n  const valuationItems = [\r\n    { label: 'Trailing P/E', key: 'trailing_pe' },\r\n    { label: 'Forward P/E', key: 'forward_pe' },\r\n    { label: 'Price-to-Sales (TTM)', key: 'price_sales_ttm' },\r\n    { label: 'Price-to-Book (MRQ)', key: 'price_book_mrq' },\r\n    { label: 'Enterprise Value', key: 'enterprise_value' },\r\n    { label: 'Enterprise Value-to-Revenue', key: 'enterprise_value_revenue' },\r\n    { label: 'Enterprise Value-to-EBITDA', key: 'enterprise_value_ebitda' },\r\n  ];\r\n\r\n  const formatValue = (key, value) => {\r\n    // Convert value to a number if it's a valid numeric string\r\n    const numericValue = (typeof value === 'string' && !isNaN(value)) ? parseFloat(value) : value;\r\n\r\n    if (key === 'enterprise_value') {\r\n      // Format monetary values in billions and append 'B'\r\n      const valueBillion = numericValue / 1000000000;\r\n      return `${currencySymbol}${valueBillion.toFixed(2)}B`;\r\n    } else if (['trailing_pe', 'forward_pe', 'price_sales_ttm', 'price_book_mrq'].includes(key)) {\r\n      // Format ratios to 2 decimal places\r\n      return numericValue.toFixed(2);\r\n    } else {\r\n      // For other values, check if it's a number and format; otherwise, return as is\r\n      return (typeof numericValue === 'number') ? `${numericValue.toFixed(2)}` : value;\r\n    }\r\n  };\r\n\r\n  const renderRow = (item, key) => {\r\n    const rawValue = valuationData[item.key];\r\n    const value = rawValue ? formatValue(item.key, rawValue) : 'N/A';\r\n\r\n    return (\r\n      <TableRow key={key}>\r\n        <TableCell component=\"th\" scope=\"row\">{item.label}</TableCell>\r\n        <TableCell align=\"right\" sx={{ fontWeight: 'bold' }}>\r\n          {value}\r\n        </TableCell>\r\n      </TableRow>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ margin: 'auto', overflow: 'hidden' }}>\r\n      <Box sx={{ bgcolor: 'primary.main', p: 1 }}>\r\n        <Typography variant=\"subtitle1\" sx={{ color: 'common.white', textAlign: 'center' }}>Valuation</Typography>\r\n      </Box>\r\n      <TableContainer>\r\n        <Table aria-label=\"Valuation Table\">\r\n          <TableBody>\r\n            {valuationData ? (\r\n              valuationItems.map((item, index) => renderRow(item, index))\r\n            ) : (\r\n              <TableRow>\r\n                <TableCell>\r\n                  <Skeleton variant=\"text\" width={100} />\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Skeleton variant=\"text\" width={100} />\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default ValuationTable;\r\n"],"names":["_ref","valuationData","general","currencySymbol","currency_symbol","renderRow","item","key","rawValue","value","formatValue","numericValue","isNaN","parseFloat","valueBillion","concat","toFixed","includes","_jsxs","TableRow","children","_jsx","TableCell","component","scope","label","align","sx","fontWeight","Paper","elevation","margin","overflow","Box","bgcolor","p","Typography","variant","color","textAlign","TableContainer","Table","TableBody","map","index","Skeleton","width"],"sourceRoot":""}