{"version":3,"file":"static/js/195.9766ea0f.chunk.js","mappings":"wPAcA,MA4GA,EA5GwBA,IAAqB,IAApB,WAAEC,GAAYD,EACrC,MAAME,EAAwB,CAC5B,CAAEC,IAAK,2BAA4BC,MAAO,gBAC1C,CAAED,IAAK,wBAAyBC,MAAO,cACvC,CAAED,IAAK,iBAAkBC,MAAO,OAChC,CAAED,IAAK,aAAcC,MAAO,cAC5B,CAAED,IAAK,4BAA6BC,MAAO,gBAC3C,CAAED,IAAK,yBAA0BC,MAAO,qBAGpCC,EAAyB,CAC7B,CAAEF,IAAK,iBAAkBC,MAAO,kBAChC,CAAED,IAAK,WAAYC,MAAO,aAC1B,CAAED,IAAK,YAAaC,MAAO,aAC3B,CAAED,IAAK,gBAAiBC,MAAO,iBAC/B,CAAED,IAAK,+BAAgCC,MAAO,oBAC9C,CAAED,IAAK,4BAA6BC,MAAO,sBAGvCE,EAAYA,CAACC,EAAMJ,KACvB,IAAIK,EAAiBP,EAAWM,EAAKJ,KAErC,GAAiB,0BAAbI,EAAKJ,IAAiC,CACxC,MAAMM,EAAYC,WAAWT,EAAWM,EAAKJ,MACxCQ,MAAMF,KACTD,GAAkBC,EAAY,KAAYG,QAAQ,GAAK,IAE3D,MAAO,GAAiB,mBAAbL,EAAKJ,IAA0B,CACxC,MAAMU,EAAgBH,WAAWT,EAAWM,EAAKJ,MAC5CQ,MAAME,KACTL,GAAkC,IAAhBK,GAAqBD,QAAQ,GAAK,IAExD,MAAO,GAAiB,aAAbL,EAAKJ,IAAoB,CAClC,MAAMW,EAAUJ,WAAWT,EAAWM,EAAKJ,MACtCQ,MAAMG,KACTN,EAAiBM,EAAQF,QAAQ,GAErC,CAEA,OACEG,EAAAA,EAAAA,MAACC,EAAAA,EAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,UAAU,KAAKC,MAAM,MAAKJ,SAAEV,EAAKH,SAC5Cc,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACG,MAAM,QAAQC,GAAI,CAAEC,WAAY,QAASP,SACjDT,MAHUL,EAKJ,EAIf,OACEY,EAAAA,EAAAA,MAACU,EAAAA,EAAK,CAACC,UAAW,EAAGH,GAAI,CAAEI,OAAQ,OAAQC,SAAU,UAAWX,SAAA,EAC9DC,EAAAA,EAAAA,KAACW,EAAAA,EAAG,CAACN,GAAI,CAAEO,QAAS,eAAgBC,EAAG,GAAId,UACzCC,EAAAA,EAAAA,KAACc,EAAAA,EAAU,CAACC,QAAQ,YAAYV,GAAI,CAAEW,MAAO,eAAgBC,UAAW,UAAWlB,SAAC,kBAEtFF,EAAAA,EAAAA,MAACqB,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAErB,SAAA,EACzBC,EAAAA,EAAAA,KAACkB,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,EAAEvB,UACfC,EAAAA,EAAAA,KAACuB,EAAAA,EAAc,CAAAxB,UACbC,EAAAA,EAAAA,KAACwB,EAAAA,EAAK,CAAC,aAAW,mBAAkBzB,UAClCC,EAAAA,EAAAA,KAACyB,EAAAA,EAAS,CAAA1B,SACPhB,EAECC,EAAsB0C,KAAKrC,GAASD,EAAUC,EAAMA,EAAKJ,OAGzD0C,MAAMC,KAAK,CAAEC,OAAQ7C,EAAsB6C,SAAU,CAACC,EAAGC,KACvDlC,EAAAA,EAAAA,MAACC,EAAAA,EAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAAAF,UACRC,EAAAA,EAAAA,KAACgC,EAAAA,EAAQ,CAACjB,QAAQ,OAAOkB,MAAO,IAAKC,UAAU,YAEjDlC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAAAF,UACRC,EAAAA,EAAAA,KAACgC,EAAAA,EAAQ,CAACjB,QAAQ,OAAOkB,MAAO,IAAKC,UAAU,aALpCH,cAc3B/B,EAAAA,EAAAA,KAACkB,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,EAAEvB,UACfC,EAAAA,EAAAA,KAACuB,EAAAA,EAAc,CAAAxB,UACbC,EAAAA,EAAAA,KAACwB,EAAAA,EAAK,CAAC,aAAW,mBAAkBzB,UAClCC,EAAAA,EAAAA,KAACyB,EAAAA,EAAS,CAAA1B,SACPhB,EAECI,EAAuBuC,KAAKrC,GAASD,EAAUC,EAAMA,EAAKJ,OAG1D0C,MAAMC,KAAK,CAAEC,OAAQ1C,EAAuB0C,SAAU,CAACC,EAAGC,KACxDlC,EAAAA,EAAAA,MAACC,EAAAA,EAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAAAF,UACRC,EAAAA,EAAAA,KAACgC,EAAAA,EAAQ,CAACjB,QAAQ,OAAOkB,MAAO,IAAKC,UAAU,YAEjDlC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAAAF,UACRC,EAAAA,EAAAA,KAACgC,EAAAA,EAAQ,CAACjB,QAAQ,OAAOkB,MAAO,IAAKC,UAAU,aALpCH,kBAevB,C","sources":["components/stockpage/StockHighlights.js"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableRow,\r\n  Paper,\r\n  Box,\r\n  Grid,\r\n  Skeleton // Import Skeleton from Material-UI\r\n} from '@mui/material';\r\n\r\nconst StockHighlights = ({ highlights }) => {\r\n  const firstColumnHighlights = [\r\n    { key: \"wall_street_target_price\", label: \"Target Price\" },\r\n    { key: \"market_capitalization\", label: \"Market Cap\" },\r\n    { key: \"earnings_share\", label: \"EPS\" },\r\n    { key: \"book_value\", label: \"Book Value\" },\r\n    { key: \"eps_estimate_current_year\", label: \"EPS Estimate\" },\r\n    { key: \"eps_estimate_next_year\", label: \"EPS Est. Next Yr\" },\r\n  ];\r\n\r\n  const secondColumnHighlights = [\r\n    { key: \"dividend_yield\", label: \"Dividend Yield\" },\r\n    { key: \"pe_ratio\", label: \"P/E Ratio\" },\r\n    { key: \"peg_ratio\", label: \"PEG Ratio\" },\r\n    { key: \"profit_margin\", label: \"Profit Margin\" },\r\n    { key: \"eps_estimate_current_quarter\", label: \"EPS Estimate Qtr\" },\r\n    { key: \"eps_estimate_next_quarter\", label: \"EPS Est. Next Qtr\" },    \r\n  ];\r\n\r\n  const renderRow = (data, key) => {\r\n    let formattedValue = highlights[data.key];\r\n\r\n    if (data.key === \"market_capitalization\") {\r\n      const marketCap = parseFloat(highlights[data.key]);\r\n      if (!isNaN(marketCap)) {\r\n        formattedValue = (marketCap / 1000000000).toFixed(2) + \"B\";\r\n      }\r\n    } else if (data.key === \"dividend_yield\") {\r\n      const dividendYield = parseFloat(highlights[data.key]);\r\n      if (!isNaN(dividendYield)) {\r\n        formattedValue = (dividendYield * 100).toFixed(2) + \"%\";\r\n      }\r\n    } else if (data.key === \"pe_ratio\") {\r\n      const peRatio = parseFloat(highlights[data.key]);\r\n      if (!isNaN(peRatio)) {\r\n        formattedValue = peRatio.toFixed(2);\r\n      }\r\n    }\r\n\r\n    return (\r\n      <TableRow key={key}>\r\n        <TableCell component=\"th\" scope=\"row\">{data.label}</TableCell>\r\n        <TableCell align=\"right\" sx={{ fontWeight: 'bold' }}>\r\n          {formattedValue}\r\n        </TableCell>\r\n      </TableRow>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ margin: 'auto', overflow: 'hidden' }}>\r\n      <Box sx={{ bgcolor: 'primary.main', p: 1 }}>\r\n        <Typography variant=\"subtitle1\" sx={{ color: 'common.white', textAlign: 'center' }}>Highlights</Typography>\r\n      </Box>\r\n      <Grid container spacing={0}>\r\n        <Grid item xs={6}>\r\n          <TableContainer>\r\n            <Table aria-label=\"Highlights Table\">\r\n              <TableBody>\r\n                {highlights ? (\r\n                  // Render content if highlights data is available\r\n                  firstColumnHighlights.map((data) => renderRow(data, data.key))\r\n                ) : (\r\n                  // Render skeleton loader if highlights data is not available\r\n                  Array.from({ length: firstColumnHighlights.length }, (_, index) => (\r\n                    <TableRow key={index}>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" width={100} animation=\"wave\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" width={100} animation=\"wave\" />\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <TableContainer>\r\n            <Table aria-label=\"Highlights Table\">\r\n              <TableBody>\r\n                {highlights ? (\r\n                  // Render content if highlights data is available\r\n                  secondColumnHighlights.map((data) => renderRow(data, data.key))\r\n                ) : (\r\n                  // Render skeleton loader if highlights data is not available\r\n                  Array.from({ length: secondColumnHighlights.length }, (_, index) => (\r\n                    <TableRow key={index}>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" width={100} animation=\"wave\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" width={100} animation=\"wave\" />\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default StockHighlights;\r\n"],"names":["_ref","highlights","firstColumnHighlights","key","label","secondColumnHighlights","renderRow","data","formattedValue","marketCap","parseFloat","isNaN","toFixed","dividendYield","peRatio","_jsxs","TableRow","children","_jsx","TableCell","component","scope","align","sx","fontWeight","Paper","elevation","margin","overflow","Box","bgcolor","p","Typography","variant","color","textAlign","Grid","container","spacing","item","xs","TableContainer","Table","TableBody","map","Array","from","length","_","index","Skeleton","width","animation"],"sourceRoot":""}