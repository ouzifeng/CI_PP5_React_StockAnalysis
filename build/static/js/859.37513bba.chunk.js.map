{"version":3,"file":"static/js/859.37513bba.chunk.js","mappings":"8OAGA,MA6EA,EA7EwBA,IAAyB,IAAxB,eAAEC,GAAgBD,EACzC,MAgCME,EAAYA,CAACC,EAAMC,KACvB,MAAMC,EAAWJ,EAAeE,EAAKC,KAC/BE,EAAQD,EAtBIE,EAACH,EAAKE,KAExB,MAAME,EAAiC,kBAAVF,GAAuBG,MAAMH,GAA8BA,EAApBI,WAAWJ,GAE/E,GAAI,CAAC,sBAAuB,qBAAsB,eAAgB,sBAAsBK,SAASP,GAE/F,MAAgC,kBAAjBI,EAA6BA,EAAaI,QAAQ,GAAKN,EACjE,GAAI,CAAC,eAAgB,4BAA4BK,SAASP,GAG/D,MAAM,GAANS,QADsBL,EAAe,KACbI,QAAQ,GAAE,KAC7B,MAAY,kBAARR,EAEH,GAANS,QAA0B,IAAfL,GAAoBI,QAAQ,GAAE,KAGT,kBAAjBJ,EAA6BA,EAAaI,QAAQ,GAAKN,CACxE,EAKyBC,CAAYJ,EAAKC,IAAKC,GAAY,MAG3D,OACES,EAAAA,EAAAA,MAACC,EAAAA,EAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,UAAU,KAAKC,MAAM,MAAKJ,SAAEb,EAAKkB,SAC5CJ,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACI,MAAM,QAAQC,GAAI,CAAEC,WAAY,QAASR,SACjDV,MAHUF,EAKJ,EAIf,OACEU,EAAAA,EAAAA,MAACW,EAAAA,EAAK,CAACC,UAAW,EAAGH,GAAI,CAAEI,OAAQ,OAAQC,SAAU,UAAWZ,SAAA,EAC9DC,EAAAA,EAAAA,KAACY,EAAAA,EAAG,CAACN,GAAI,CAAEO,QAAS,eAAgBC,EAAG,GAAIf,UACzCC,EAAAA,EAAAA,KAACe,EAAAA,EAAU,CAACC,QAAQ,YAAYV,GAAI,CAAEW,MAAO,eAAgBC,UAAW,UAAWnB,SAAC,kBAEtFC,EAAAA,EAAAA,KAACmB,EAAAA,EAAc,CAAApB,UACbC,EAAAA,EAAAA,KAACoB,EAAAA,EAAK,CAAC,aAAW,mBAAkBrB,UAClCC,EAAAA,EAAAA,KAACqB,EAAAA,EAAS,CAAAtB,SACPf,EAvDa,CACtB,CAAEoB,MAAO,OAAQjB,IAAK,QACtB,CAAEiB,MAAO,eAAgBjB,IAAK,uBAC9B,CAAEiB,MAAO,cAAejB,IAAK,sBAC7B,CAAEiB,MAAO,oBAAqBjB,IAAK,gBACnC,CAAEiB,MAAO,qBAAsBjB,IAAK,sBACpC,CAAEiB,MAAO,eAAgBjB,IAAK,gBAC9B,CAAEiB,MAAO,2BAA4BjB,IAAK,4BAC1C,CAAEiB,MAAO,cAAejB,IAAK,eAC7B,CAAEiB,MAAO,gBAAiBjB,IAAK,kBAgDlBmC,QAAOpC,GAAqB,YAAbA,EAAKC,MACpBoC,KAAI,CAACrC,EAAMsC,IAAUvC,EAAUC,EAAMsC,MAExC3B,EAAAA,EAAAA,MAACC,EAAAA,EAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAAAF,UACRC,EAAAA,EAAAA,KAACyB,EAAAA,EAAQ,CAACT,QAAQ,OAAOU,MAAO,SAElC1B,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAAAF,UACRC,EAAAA,EAAAA,KAACyB,EAAAA,EAAQ,CAACT,QAAQ,OAAOU,MAAO,mBAOtC,C","sources":["components/stockpage/TechnicalTable.js"],"sourcesContent":["import React from 'react';\r\nimport { Typography, Table, TableBody, TableCell, TableContainer, TableRow, Paper, Box, Skeleton } from '@mui/material';\r\n\r\nconst TechnicalsTable = ({ technicalsData }) => {\r\n  const technicalsItems = [\r\n    { label: 'Beta', key: 'beta' },\r\n    { label: '52-Week High', key: 'fifty_two_week_high' },\r\n    { label: '52-Week Low', key: 'fifty_two_week_low' },\r\n    { label: '50-Day Moving Avg', key: 'fifty_day_ma' },\r\n    { label: '200-Day Moving Avg', key: 'two_hundred_day_ma' },\r\n    { label: 'Shares Short', key: 'shares_short' },\r\n    { label: 'Shares Short Prior Month', key: 'shares_short_prior_month' },\r\n    { label: 'Short Ratio', key: 'short_ratio' },\r\n    { label: 'Short Percent', key: 'short_percent' },\r\n  ];\r\n\r\n  const formatValue = (key, value) => {\r\n    // Ensure the value is converted to a number if it's a string representing a number\r\n    const numericValue = (typeof value === 'string' && !isNaN(value)) ? parseFloat(value) : value;\r\n\r\n    if (['fifty_two_week_high', 'fifty_two_week_low', 'fifty_day_ma', 'two_hundred_day_ma'].includes(key)) {\r\n      // Format these values to 2 decimal places\r\n      return (typeof numericValue === 'number') ? numericValue.toFixed(2) : value;\r\n    } else if (['shares_short', 'shares_short_prior_month'].includes(key)) {\r\n      // Format these values in millions\r\n      const valueMillions = numericValue / 1000000;\r\n      return `${valueMillions.toFixed(1)}M`;\r\n    } else if (key === 'short_percent') {\r\n      // Format short percent as a percentage\r\n      return `${(numericValue * 100).toFixed(2)}%`;\r\n    } else {\r\n      // For other values, check if it's a number and format; otherwise, return as is\r\n      return (typeof numericValue === 'number') ? numericValue.toFixed(2) : value;\r\n    }\r\n  };\r\n\r\n  const renderRow = (item, key) => {\r\n    const rawValue = technicalsData[item.key];\r\n    const value = rawValue ? formatValue(item.key, rawValue) : 'N/A';\r\n\r\n\r\n    return (\r\n      <TableRow key={key}>\r\n        <TableCell component=\"th\" scope=\"row\">{item.label}</TableCell>\r\n        <TableCell align=\"right\" sx={{ fontWeight: 'bold' }}>\r\n          {value}\r\n        </TableCell>\r\n      </TableRow>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ margin: 'auto', overflow: 'hidden' }}>\r\n      <Box sx={{ bgcolor: 'primary.main', p: 1 }}>\r\n        <Typography variant=\"subtitle1\" sx={{ color: 'common.white', textAlign: 'center' }}>Technicals</Typography>\r\n      </Box>\r\n      <TableContainer>\r\n        <Table aria-label=\"Technicals Table\">\r\n          <TableBody>\r\n            {technicalsData ? (\r\n              technicalsItems\r\n                .filter(item => item.key !== 'general') // Filter out \"General\"\r\n                .map((item, index) => renderRow(item, index))\r\n            ) : (\r\n              <TableRow>\r\n                <TableCell>\r\n                  <Skeleton variant=\"text\" width={100} />\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Skeleton variant=\"text\" width={100} />\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default TechnicalsTable;\r\n"],"names":["_ref","technicalsData","renderRow","item","key","rawValue","value","formatValue","numericValue","isNaN","parseFloat","includes","toFixed","concat","_jsxs","TableRow","children","_jsx","TableCell","component","scope","label","align","sx","fontWeight","Paper","elevation","margin","overflow","Box","bgcolor","p","Typography","variant","color","textAlign","TableContainer","Table","TableBody","filter","map","index","Skeleton","width"],"sourceRoot":""}