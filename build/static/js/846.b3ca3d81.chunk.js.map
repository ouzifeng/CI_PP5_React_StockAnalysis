{"version":3,"file":"static/js/846.b3ca3d81.chunk.js","mappings":"8OAaA,MA+EA,EA/EoBA,IAA8B,IAA7B,WAAEC,EAAU,QAAEC,GAASF,EAC1C,MAAMG,EAAiBD,EAAQE,iBAAmB,IAE5CC,EAAa,CACjB,CAAEC,IAAK,uBAAwBC,MAAO,0BACtC,CAAED,IAAK,uBAAwBC,MAAO,0BACtC,CAAED,IAAK,uBAAwBC,MAAO,0BACtC,CAAED,IAAK,cAAeC,MAAO,iBAC7B,CAAED,IAAK,wBAAyBC,MAAO,2BACvC,CAAED,IAAK,+BAAgCC,MAAO,kCAC9C,CAAED,IAAK,mBAAoBC,MAAO,sBAClC,CAAED,IAAK,kBAAmBC,MAAO,qBACjC,CAAED,IAAK,gCAAiCC,MAAO,oCAwB3CC,EAAYA,CAACC,EAAMH,KACvB,MAAMI,EAtBYC,EAACL,EAAKM,KAExB,MAAMC,EAAiC,kBAAVD,GAAuBE,MAAMF,GAA8BA,EAApBG,WAAWH,GAE/E,MAAY,yBAARN,GAA0C,yBAARA,GAA0C,yBAARA,GAA0C,kCAARA,GAAmD,kCAARA,GAAmD,iCAARA,EACxL,GAANU,QAA0B,IAAfH,GAAoBI,QAAQ,GAAE,KAG/B,gBAARX,GAAiC,qBAARA,EACrB,GAANU,OAAUb,GAAca,QAAIH,EAAe,KAAYI,QAAQ,GAAE,KAGvD,0BAARX,EACI,GAANU,OAAUb,GAAca,OAAGH,EAAaI,QAAQ,IAIlB,kBAAjBJ,EAA6BA,EAAaI,QAAQ,GAAKL,CAAK,EAKpDD,CAAYF,EAAKH,IAAKL,EAAWQ,EAAKH,OAAS,MAEtE,OACEY,EAAAA,EAAAA,MAACC,EAAAA,EAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,UAAU,KAAKC,MAAM,MAAKJ,SAAEX,EAAKF,SAC5Cc,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACG,MAAM,QAAQC,GAAI,CAAEC,WAAY,QAASP,SACjDV,MAHUJ,EAKJ,EAIf,OACEY,EAAAA,EAAAA,MAACU,EAAAA,EAAK,CAACC,UAAW,EAAGH,GAAI,CAAEI,OAAQ,OAAQC,SAAU,UAAWX,SAAA,EAC9DC,EAAAA,EAAAA,KAACW,EAAAA,EAAG,CAACN,GAAI,CAAEO,QAAS,eAAgBC,EAAG,GAAId,UACzCC,EAAAA,EAAAA,KAACc,EAAAA,EAAU,CAACC,QAAQ,YAAYV,GAAI,CAAEW,MAAO,eAAgBC,UAAW,UAAWlB,SAAC,cAEtFC,EAAAA,EAAAA,KAACkB,EAAAA,EAAc,CAAAnB,UACbC,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAAC,aAAW,eAAcpB,UAC9BC,EAAAA,EAAAA,KAACoB,EAAAA,EAAS,CAAArB,SACPnB,EACCI,EAAWqC,KAAI,CAACjC,EAAMkC,IAAUnC,EAAUC,EAAMkC,KAGhDC,MAAMC,KAAK,CAAEC,OAAQzC,EAAWyC,SAAU,CAACC,EAAGJ,KAC5CzB,EAAAA,EAAAA,MAACC,EAAAA,EAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAAAF,UACRC,EAAAA,EAAAA,KAAC2B,EAAAA,EAAQ,CAACZ,QAAQ,OAAOa,MAAO,IAAKC,UAAU,YAEjD7B,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAAAF,UACRC,EAAAA,EAAAA,KAAC2B,EAAAA,EAAQ,CAACZ,QAAQ,OAAOa,MAAO,IAAKC,UAAU,aALpCP,aAanB,C","sources":["components/stockpage/MarginTable.js"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableRow,\r\n  Paper,\r\n  Box,\r\n  Skeleton\r\n} from '@mui/material';\r\n\r\nconst MarginTable = ({ highlights, general }) => {\r\n  const currencySymbol = general.currency_symbol || '$';\r\n\r\n  const marginData = [\r\n    { key: \"operating_margin_ttm\", label: \"Operating Margin (TTM)\" },\r\n    { key: \"return_on_assets_ttm\", label: \"Return on Assets (TTM)\" },\r\n    { key: \"return_on_equity_ttm\", label: \"Return on Equity (TTM)\" },\r\n    { key: \"revenue_ttm\", label: \"Revenue (TTM)\" },\r\n    { key: \"revenue_per_share_ttm\", label: \"Revenue per Share (TTM)\" },\r\n    { key: \"quarterly_revenue_growth_yoy\", label: \"Quarterly Revenue Growth (YoY)\" },\r\n    { key: \"gross_profit_ttm\", label: \"Gross Profit (TTM)\" },\r\n    { key: \"diluted_eps_ttm\", label: \"Diluted EPS (TTM)\" },\r\n    { key: \"quarterly_earnings_growth_yoy\", label: \"Quarterly Earnings Growth (YoY)\" },\r\n  ];\r\n\r\n  const formatValue = (key, value) => {\r\n    // Ensure the value is a number if it's a string representing a number\r\n    const numericValue = (typeof value === 'string' && !isNaN(value)) ? parseFloat(value) : value;\r\n\r\n    if (key === \"operating_margin_ttm\" || key === \"return_on_assets_ttm\" || key === \"return_on_equity_ttm\" || key === \"quarterly_earnings_growth_yoy\" || key === \"quarterly_earnings_growth_yoy\" || key === \"quarterly_revenue_growth_yoy\") {\r\n      return `${(numericValue * 100).toFixed(2)}%`;\r\n    }\r\n\r\n    if (key === \"revenue_ttm\" || key === \"gross_profit_ttm\") {\r\n      return `${currencySymbol}${(numericValue / 1000000000).toFixed(2)}B`;\r\n    }\r\n\r\n    if (key === \"revenue_per_share_ttm\") {\r\n      return `${currencySymbol}${numericValue.toFixed(2)}`;\r\n    }\r\n\r\n    // If it's not one of the specific keys, check if it's a number and format; otherwise, return as is\r\n    return (typeof numericValue === 'number') ? numericValue.toFixed(2) : value;\r\n  };\r\n\r\n\r\n  const renderRow = (data, key) => {\r\n    const formattedValue = formatValue(data.key, highlights[data.key]) || 'N/A';\r\n\r\n    return (\r\n      <TableRow key={key}>\r\n        <TableCell component=\"th\" scope=\"row\">{data.label}</TableCell>\r\n        <TableCell align=\"right\" sx={{ fontWeight: 'bold' }}>\r\n          {formattedValue}\r\n        </TableCell>\r\n      </TableRow>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ margin: 'auto', overflow: 'hidden' }}>\r\n      <Box sx={{ bgcolor: 'primary.main', p: 1 }}>\r\n        <Typography variant=\"subtitle1\" sx={{ color: 'common.white', textAlign: 'center' }}>Margin</Typography>\r\n      </Box>\r\n      <TableContainer>\r\n        <Table aria-label=\"Margin Table\">\r\n          <TableBody>\r\n            {highlights ? (\r\n              marginData.map((data, index) => renderRow(data, index))\r\n            ) : (\r\n              // Render skeleton loader if highlights data is not available\r\n              Array.from({ length: marginData.length }, (_, index) => (\r\n                <TableRow key={index}>\r\n                  <TableCell>\r\n                    <Skeleton variant=\"text\" width={100} animation=\"wave\" />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Skeleton variant=\"text\" width={100} animation=\"wave\" />\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default MarginTable;\r\n"],"names":["_ref","highlights","general","currencySymbol","currency_symbol","marginData","key","label","renderRow","data","formattedValue","formatValue","value","numericValue","isNaN","parseFloat","concat","toFixed","_jsxs","TableRow","children","_jsx","TableCell","component","scope","align","sx","fontWeight","Paper","elevation","margin","overflow","Box","bgcolor","p","Typography","variant","color","textAlign","TableContainer","Table","TableBody","map","index","Array","from","length","_","Skeleton","width","animation"],"sourceRoot":""}